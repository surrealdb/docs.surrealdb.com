---
import PlaceholderImage from '@assets/img/examples/placeholder.png';
import SurrealDBAuthorImage from '@assets/img/icon/icon.svg';
import EmbedImage from '@assets/img/image/example/embed.png';
import GraphImage from '@assets/img/image/example/graph.png';
import MachineLearningImage from '@assets/img/image/example/machine-learning.png';
import RelationalImage from '@assets/img/image/example/relational.png';
import SearchImage from '@assets/img/image/example/search.png';
import type {
    CategoryItem,
    FilterDocsLessons,
} from '@config/pages/example/types';
import Image from '@src/components/Image.astro';
import { slug } from '@src/util/doc';
import { cn } from '@src/util/tailwind';

const categoryImageMap: Record<FilterDocsLessons, ImageMetadata> = {
    ai: MachineLearningImage,
    'data management': RelationalImage,
    ingest: SearchImage,
    integrations: EmbedImage,
    kai: GraphImage,
    'python sdk': EmbedImage,
    'query performance': EmbedImage,
    'real-time': EmbedImage,
};

const lessonMap: Record<FilterDocsLessons, string> = {
    ai: 'AI',
    'data management': 'Data Management',
    ingest: 'Ingest',
    integrations: 'Integration',
    kai: 'Kai',
    'python sdk': 'Python SDK',
    'query performance': 'Query Performance',
    'real-time': 'Real-Time',
};

const surrealDBAuthor = {
    name: 'SurrealDB',
    role: 'Engineering team',
    image: EmbedImage,
} as const;

interface Props {
    item: CategoryItem;
    imageMap: Map<string, Promise<ImageMetadata>>;
}

const { item, imageMap } = Astro.props;

const author = item.author === 'surrealdb' ? surrealDBAuthor : item.author;
const slugified = slug(author.name);

const authorImage =
    item.author === 'surrealdb'
        ? SurrealDBAuthorImage
        : (await imageMap.get(slugified)) || PlaceholderImage;
---

<style>
	.grid-item__footer-badge {
		@apply bg-gradient-to-tl to-[#6F79884D] from-[#6F79881A] py-2 px-4 rounded-full text-xs text-gray-200/80;
	}
</style>

<div
	class="!flex flex-col border border-border rounded-xl p-8 relative gradient-background-reversed overflow-hidden grid-item"
	data-difficulty={item.difficulty}
	data-lesson-area={item.lesson}
	data-deployment-type={item.deploy}
	style="min-height: 420px;"
>
		<div class="absolute right-0 top-0 w-40">
			<Image
				src={item.lesson ? categoryImageMap[item.lesson] : EmbedImage}
				alt={item.description || item.text}	
				loading="lazy"
			/>
		</div>
		<p class="pt-32 text-sm font-medium !mb-0.5">
			{lessonMap[item.lesson]}
		</p>
		<a 
			class="!mt-0 mb-6 !text-white text-xl hover:!text-surreal-pink hover:!no-underline line-clamp-2 leading-none" 
			role="heading"
			href={item.url} 
			target="_blank"
			title={item.text}
			style="max-height: 65px;"
		>
			{item.text}
		</a>
		<hr class="border-border" role="separator" aria-orientation="horizontal" />
		<div class={cn("grid grid-cols-[auto,1fr] grid-rows-2 gap-x-2.5 mt-4")}>
			<div class="size-6 flex row-span-1 rounded-3xl overflow-hidden">
				<!-- changes to alt -->
				<Image
					class="object-cover w-full h-full"
					src={authorImage}
					alt={'Platform'}
					loading="lazy"
				/>
			</div>
			<h4 class="row-start-1 row-end-1 col-start-2 col-end-2 !mb-1 h-min !text-sm !leading-none">
				{author?.name || 'Unknown Author'}
			</h4>
			<p class="row-start-2 row-end-2 col-start-2 col-end-2 text-xs text-gray-500">
				{author?.role}
			</p>
		</div>
		<div class="flex flex-wrap gap-2 mt-auto">
			{item.difficulty && (
				<div class="grid-item__footer-badge">
					{item.difficulty}
				</div>
			)}
			{item.deploy && (
				<div class="grid-item__footer-badge">
					{item.deploy}
				</div>
			)}
		</div>
</div>