---

interface Props {
    categories: string[];
}

const { categories } = Astro.props;

const filterSections = [
    {
        title: 'Difficulty',
        key: 'difficulty',
        options: ['Beginner', 'Intermediate', 'Advanced'],
    },
    {
        title: 'Lesson Areas',
        key: 'lessonArea',
        options: [
            'AI',
            'Data Management',
            'Ingest',
            'Integrations',
            'Kai',
            'Python SDK',
            'Query Performance',
            'Real-time',
        ],
    },
    {
        title: 'Deployment Type',
        key: 'deploymentType',
        options: ['Shared-Tier', 'Standard'],
    },
];
---

<aside class="w-full md:w-1/4 p-4 rounded top-4 h-fit">
	{filterSections.map(section => (
		<h5 class="text-base mb-4 font-semibold">{section.title}</h5>
		<div class="space-y-3 max-h-[70vh] overflow-y-auto">
			{section.options.map((cat) => (
				<label class="flex items-center gap-2 cursor-pointer">
					<input
						type="checkbox"
						class="filter-checkbox accent-[#ff0083] w-4 h-4 rounded border-gray-300"
						value={cat}
						data-section={section.key.toLowerCase()}
					/>
					<span class="text-base">{cat}</span>
				</label>
			))}
		</div>
		<hr class="my-4 border-[#232324]" />
	))}
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll('.filter-checkbox');
    const gridItems = document.querySelectorAll<HTMLDivElement>('.grid-item');

	const attributes = [
		'data-difficulty',
		'data-lesson-area',
		'data-deployment-type',
	] as const;

    function updateGrid() {

		const selected = Array.from(checkboxes)
  			.filter(cb => (cb as HTMLInputElement).checked)
  			.map(cb => (cb as HTMLInputElement).value);

      		const showAll = selected.length === 0;

      		for(const item of gridItems) {
				
				const values = attributes.map(attr => {
					return item.getAttribute(attr)?.toLowerCase() || '';
				});

				const matches = selected.every(cat => {
					if(showAll) return true;
					return values.some(value => value.includes(cat.toLowerCase()));
				});

				item.style.display = matches ? 'block' : 'none';
	  		}
    }

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateGrid);
    });

    // Initial grid setup
    updateGrid();
  });
</script>