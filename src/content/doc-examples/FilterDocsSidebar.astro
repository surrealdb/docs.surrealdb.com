---

interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<aside class="w-full md:w-1/4 p-4 rounded top-4 h-fit">
	<h5 class="text-base mb-4 font-semibold">Filter by Category</h5>
	<div class="space-y-3 max-h-[70vh] overflow-y-auto">
    	{categories.map((cat) => (
    		<label class="flex items-center gap-2 cursor-pointer">
      			<input
      			  type="checkbox"
      			  class="filter-checkbox accent-[#ff0083] w-4 h-4 rounded border-gray-300"
      			  value={cat}
      			/>
      			<span class="text-base">{cat}</span>
    		</label>
    	))}
    </div>
    <hr class="my-4 border-[#232324]" />
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll('.filter-checkbox');
    const gridItems = document.querySelectorAll('.grid-item');

    function updateGrid() {
      const selectedCategories = Array.from(checkboxes)
        .filter(cb => (cb as HTMLInputElement).checked)
        .map(cb => (cb as HTMLInputElement).value);

      const showAll = selectedCategories.length === 0;

      gridItems.forEach(item => {
        const itemCategory = item.getAttribute('data-category');
        if (showAll || (itemCategory && selectedCategories.includes(itemCategory))) {
          (item as HTMLElement).style.display = 'block';
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });
    }

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateGrid);
    });

    // Initial grid setup
    updateGrid();
  });
</script>