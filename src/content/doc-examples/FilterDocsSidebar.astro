---

const filterSections = [
    {
        title: 'Difficulty',
        key: 'difficulty',
        options: ['Beginner', 'Intermediate', 'Advanced'],
    },
    {
        title: 'Lesson Areas',
        key: 'lessonArea',
        options: [
            'AI',
            'Data Management',
            'Ingest',
            'Integrations',
            'Python SDK',
            'Query Performance',
            'Real-time',
            'Embedding',
        ],
    },
    {
        title: 'Deployment Type',
        key: 'deploymentType',
        options: ['Shared-Tier', 'Standard'],
    },
];
---

<aside class="w-full md:w-1/4 py-4 pr-4 sticky top-10 h-fit">
   {filterSections.map((section, index, arr) => (
		<Fragment>
            <h5 class="text-base mb-4 font-semibold">{section.title}</h5>
            <div class="space-y-3 max-h-[70vh] overflow-y-auto">
                {section.options.map((cat) => (
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input
                            type="checkbox"
                            class="filter-checkbox accent-[#ff0083] w-4 h-4 rounded border-gray-300"
                            value={cat}
                            data-section={section.key.toLowerCase()}
                        />
                        <span class="text-base">{cat}</span>
                    </label>
                ))}
            </div>
            {arr.length - 1 !== index && <hr class="border-border h-px rounded-full my-6" />}
        </Fragment>
    ))}
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll<HTMLInputElement>('.filter-checkbox');
    const gridItems = document.querySelectorAll<HTMLDivElement>('.grid-item');

	const attributes = [
		'data-difficulty',
		'data-lesson-area',
		'data-deployment-type',
	] as const;

	function initialize() {
		const url = new URL(window.location.href);
		const filters = url.searchParams.get('filters');

		if(!filters) {
			return;
		}

		const selected = filters.split(',')
			.map(cat => cat.trim());

		if(selected.length === 0) {
			return;
		}

		for(const checkbox of checkboxes) {
			const value = checkbox.value;
			if (selected.includes(value)) {
				checkbox.checked = true;
			}
		}
	}

    function updateGrid() {
		const url = new URL(window.location.href);
		
		// Clear existing filters in the URL
		const selected = Array.from(checkboxes)
		.filter(cb => cb.checked)
  			.map(cb => cb.value.toLowerCase());
	

		if(selected.length === 0) {
			url.searchParams.delete('filters');
		} else {
			url.searchParams.set('filters', selected.join(','));
		}
		
		window.history.replaceState({}, '', url);

      	const showAll = selected.length === 0;

      	for(const item of gridItems) {
			
			const values = attributes.map(attr => {
				return item.getAttribute(attr)?.toLowerCase() || '';
			});

			const matches = selected.every(cat => {
				if(showAll) return true;
				return values.some(value => value.includes(cat));
			});

			item.style.display = matches ? 'flex' : 'none';
	  	}
    }

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateGrid);
    });

    // Initial grid setup
	initialize();
    updateGrid();
  });
</script>