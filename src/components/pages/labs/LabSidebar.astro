---
import { LAB_SIDEBAR } from '@config/pages/labs';
---

<aside class="pb-4 pr-4 max-lg:pl-6 lg:sticky top-10 h-fit">
   {LAB_SIDEBAR.map((section, index, arr) => (
		<Fragment>
            <h5 class="text-base mb-4 font-semibold">{section.title}</h5>
            <div class="space-y-3 max-h-[70vh] overflow-y-auto">
                {section.options.map((cat) => (
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input
                            type="checkbox"
                            class="filter-checkbox accent-[#ff0083] w-4 h-4 rounded border-gray-300"
                            value={cat.toLowerCase()}
                            data-section={section.key.toLowerCase()}
                        />
                        <span class="text-base">{cat}</span>
                    </label>
                ))}
            </div>
            {arr.length - 1 !== index && <hr class="border-border h-px rounded-full my-6" />}
        </Fragment>
    ))}
</aside>

<script>

  document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll<HTMLInputElement>('.filter-checkbox');
    const gridItems = document.querySelectorAll<HTMLDivElement>('.grid-item');
	const [searchInput] = document.querySelectorAll<HTMLInputElement>('#lab-search');

	const filterMap = {
		"data-categories": filterCategories,
		"data-topics": filterTopics,
		"data-filters": filterFilters,
	} as const;

	const getURL: () => URL = () => {
		return new URL(window.location.href);
	};

	/**
	 * Filters the grid items based on the selected categories.
	 * This should filter based on "OR" logic, meaning
	 * if any of the selected categories match
	 * the item's attributes, it should be displayed.
	 */
	function filterCategories(item: HTMLDivElement, selected: string[]) {
		const value = item.getAttribute('data-categories');
		if (!value) return false;
		const categories = value.toLowerCase().split(',').map(v => v.trim());
		return selected.some(cat => categories.includes(cat));
	}

	function filterTopics(item: HTMLDivElement, selected: string[]) {
		const value = item.getAttribute('data-topics');
		console.log(value);
		if (!value) return false;
		const topics = value.toLowerCase().split(',').map(v => v.trim());
		return selected.every(cat => topics.includes(cat));
	}

	function filterFilters(item: HTMLDivElement, selected: string[]) {
		const value = item.getAttribute('data-filters');
		if (!value) return false;
		return value.toLowerCase() === "surrealdb";
	}

	function filterSearch(item: HTMLDivElement, searchTerm: string) {
		const title = item.querySelector('.grid-item-title')?.textContent?.toLowerCase() || '';
		return title.includes(searchTerm);
	}

	function initialize() {
		const url = getURL();
		const filters = url.searchParams.get('filters');

		if(!filters) {
			return;
		}

		const selected = filters.split(',')
			.map(cat => cat.trim());

		if(selected.length === 0) {
			return;
		}

		for(const checkbox of checkboxes) {
			const value = checkbox.value;
			if (selected.includes(value)) {
				checkbox.checked = true;
			}
		}
	}

    function updateGrid() {
		const url = getURL();

		// Collect selected values per group
		const selected = Array.from(checkboxes)
			.filter(cb => cb.checked);

		const selectedCategories = selected
			.filter(cb => cb.dataset.section === 'categories')
			.map(cb => cb.value);

		const selectedTopics = selected
			.filter(cb => cb.dataset.section === 'topics')
			.map(cb => cb.value);

		const selectedFilters = selected
			.filter(cb => cb.dataset.section === 'filters')
			.map(cb => cb.value);

		const searchTerm = searchInput.value.toLowerCase().trim();

		// Update URL
		const allSelected = [
			...selectedCategories, 
			...selectedTopics, 
			...selectedFilters
		];

		if(allSelected.length === 0) {
			url.searchParams.delete('filters');
		} else {
			url.searchParams.set('filters', allSelected.join(','));
		}

		window.history.replaceState({}, '', url);
		const showAll = allSelected.length === 0;

		for(const item of gridItems) {
			let show = true;

			// OR logic for categories
			if(selectedCategories.length > 0) {
				show = filterMap['data-categories'](item, selectedCategories);
			}
			// AND logic for topics
			if(show && selectedTopics.length > 0) {
				show = filterMap['data-topics'](item, selectedTopics);
			}
			// AND logic for filters
			if(show && selectedFilters.length > 0) {
				show = filterMap['data-filters'](item, selectedFilters);
			}
			// AND logic for search
			if(show && searchTerm.length > 0) {
				show = filterSearch(item, searchTerm);
			}

			item.style.display = show ? 'flex' : 'none';
		}
	}

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateGrid);
    });

	let throttleTimeout: NodeJS.Timeout | null = null;

	searchInput.addEventListener('input', function () {

		if (throttleTimeout) {
			clearTimeout(throttleTimeout);
		}

		throttleTimeout = setTimeout(() => updateGrid(), 150); 
	});

    // Initial grid setup
	initialize();
    updateGrid();
  });
</script>