---
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import type { CollectionKey } from 'astro:content';
import ThumbnailDocs from '@assets/img/social-preview.jpg';
import { PageHeadings } from '@components/PageHeadings.tsx';
import Sidebar from '@components/Sidebar/index.astro';
import {
    findNextPage,
    findPreviousPage,
    generateBreadcrumb,
    generateSidebar,
} from '@src/util/doc';
import { Icon } from 'astro-icon/components';
import BaseLayout from './layout/BaseLayout.astro';
import Footer from './layout/Footer/Footer.astro';
import MarkdownContainer from './shared/MarkdownContainer.astro';

import { cn } from '@src/util/tailwind';
import { metadata } from './Sidebar/metadata';

type DocName = Exclude<CollectionKey, 'labs-items'> extends `doc-${infer T}`
    ? T
    : never;

interface Props {
    doc: DocName;
    slug: CollectionEntry<`doc-${DocName}`>['slug'];
    noPageHeadings?: boolean;
    noSidebar?: boolean;
    containerWidth?: number;
}

const { doc, noPageHeadings, noSidebar } = Astro.props;
const collection = `doc-${doc}` satisfies CollectionKey;

const slug = Astro.props.slug.endsWith('/')
    ? Astro.props.slug.slice(0, -1)
    : Astro.props.slug;
const entry = await getEntry(collection, slug);
if (!entry) {
    throw new Error(`Entry not found: doc=${doc}, slug=${slug}`);
}

const { Content, headings } = await entry.render();
const sidebarItems = await generateSidebar(collection);
const sidebarIndex = sidebarItems.flat.findIndex((item) => item.slug === slug);
const prev = findPreviousPage(sidebarItems.flat, sidebarIndex);
const next =
    findNextPage(sidebarItems.flat, sidebarIndex) ?? sidebarItems.flat[0];

function filteredHeadings() {
    if (
        headings[0]?.text ===
            (entry as CollectionEntry<CollectionKey>).data.title ||
        headings[0]?.text ===
            (entry as CollectionEntry<Exclude<CollectionKey, 'labs-items'>>)
                .data.sidebar_label
    ) {
        return headings.slice(1);
    }

    return headings;
}

const breadcrumb = await generateBreadcrumb(collection, slug);
const meta = metadata[collection];

const thumbnail = 'thumbnail' in meta ? meta.thumbnail.src : ThumbnailDocs.src;
---

<style>
    :global(#sidebar-toggle:not(:checked)) ~ div :global(.flag-sidebar-container) {
        @apply max-lg:-translate-x-full;
    }
</style>

<BaseLayout
    title={entry.data.title}
    description={entry.data.description}
	image={thumbnail}
>
	<div class="flex-1 flex min-h-0">
		<!-- Sidebar -->
		{!noSidebar && (
			<div class:list={[
				"w-full lg:w-[350px] flex-shrink-0 border-r border-border bg-background flag-sidebar-container z-10",
				"max-lg:fixed inset-0 max-lg:top-14 max-lg:left-0 transition-transform duration-300"
			]}>
				<Sidebar items={sidebarItems.items} collection={collection} />
			</div>
		)}

		<!-- Document -->
		<div class="flex-1 overflow-y-scroll">
			<div class="flex flex-row">
				<!-- Article -->
				<div class="flex-1">
					<div class={cn("w-full mx-auto py-6 px-4 sm:px-8 space-y-8 box-border", !noSidebar ? "max-w-[960px]" : "max-w-[1300px]")}>
						<div class="flex items-center gap-3 pb-4 overflow-x-auto">
							<a href={`${import.meta.env.BASE_URL}/${doc.startsWith('sdk-') ? `sdk/${doc.slice(4)}` : doc}`} class="text-text/60">
								<Icon name="fa6-solid:house" class="w-3.5" />
							</a>
							{breadcrumb.items.map(({ title, href }) => (
								<>
									<Icon name="fa6-solid:chevron-right" class="w-1.5 min-w-1.5 text-text/40" />
									{href === undefined ? (
										<p class="text-text/60 font-extralight whitespace-nowrap cursor-not-allowed">
											{title}
										</p>
									) : (
										<a href={href} class="text-text/60 font-extralight whitespace-nowrap">
											{title}
										</a>
									)}
								</>
							))}
						</div>
						<MarkdownContainer class='flag-page-headings-content flag-page-content'>
							<Content />
						</MarkdownContainer>
						<div class="pt-10 flex items-center justify-between flex-wrap gap-4">
							<a href={`https://github.com/surrealdb/docs.surrealdb.com/edit/main/src/content/${collection}/${entry.id}`} class="text-surreal-pink flex items-center gap-2.5">
								<Icon name="fa6-solid:pencil" class="w-3" />
								Edit this page on GitHub
							</a>
							<button 
								class="text-surreal-pink flex items-center gap-2.5 copy-markdown-btn min-w-[160px] whitespace-nowrap"
								data-url={`https://raw.githubusercontent.com/surrealdb/docs.surrealdb.com/main/src/content/${collection}/${entry.id}`}
							>
								<Icon name="fa6-solid:copy" class="w-3" />
								Copy page as Markdown
							</button>
						</div>
						<div>
							<div class="flex justify-between gap-8">
								{prev && (
									<a href={prev.href} class="text-faint hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20">
										<Icon name="fa6-solid:chevron-left" class="w-3" />
										<span>{prev.title}</span>
									</a>
								)}
								{next && (
									<a href={next.href} class="text-faint hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20 justify-end">
										<span>{next.title}</span>
										<Icon name="fa6-solid:chevron-right" class="w-3" />
									</a>
								)}
							</div>
						</div>
					</div>
				</div>

				<!-- Table of contents -->
				<div class="pt-24 pb-56 w-[350px] hidden 3xl:block flex-shrink-0">
					{!noPageHeadings && filteredHeadings().length > 0 && (
						<div class="sticky top-4 px-3 border-l border-border py-2 flex flex-col gap-3">
							<h3 class="uppercase font-mono text-xs font-semibold">On this page</h3>
							<PageHeadings headings={filteredHeadings()} client:load />
						</div>
					)}
				</div>
			</div>

			<!-- Footer -->
			<Footer />
		</div>

		
	</div>
</BaseLayout>

<script>
	// Add copy markdown functionality
	document.querySelectorAll('.copy-markdown-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const url = btn.getAttribute('data-url');
			if (!url) return;
			const originalText = btn.innerHTML;
			try {
				const response = await fetch(new URL(url));
				const text = await response.text();
				// Try modern clipboard API first
				try {
					await navigator.clipboard.writeText(text);
				} catch (err) {
					// Fallback for clipboard copy (deprecated, but still needed for mobile/old browsers)
					const textarea = document.createElement('textarea');
					textarea.value = text;
					textarea.style.position = 'fixed';
					textarea.style.opacity = '0';
					document.body.appendChild(textarea);
					textarea.focus();
					textarea.select();
					document.execCommand('copy');
					document.body.removeChild(textarea);
				}
				// Visual feedback
				btn.innerHTML = '<Icon name="fa6-solid:check" class="w-3" /> Copied!';
				setTimeout(() => {
					btn.innerHTML = originalText;
				}, 2000);
			} catch (err) {
				console.error('Failed to copy markdown:', err);
				btn.innerHTML = '<Icon name="fa6-solid:xmark" class="w-3" /> Failed to copy';
				setTimeout(() => {
					btn.innerHTML = originalText;
				}, 2000);
				alert('Failed to copy markdown. Please try manually selecting and copying the text.');
			}
		});
	});
</script>
