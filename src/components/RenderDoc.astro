---
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import type { CollectionKey } from 'astro:content';
import ThumbnailDocs from '@assets/img/social-preview.jpg';
import { PageHeadings } from '@components/PageHeadings.tsx';
import Sidebar from '@components/Sidebar/index.astro';
import {
    findNextPage,
    findPreviousPage,
    generateBreadcrumb,
    generateSidebar,
} from '@src/util/doc';
import { cn } from '@src/util/tailwind';
import { Icon } from 'astro-icon/components';
import { metadata } from './Sidebar/metadata';
import BaseLayout from './layout/BaseLayout.astro';
import Footer from './layout/Footer/Footer.astro';
import MarkdownContainer from './shared/MarkdownContainer.astro';

type DocName = Exclude<CollectionKey, 'labs-items'> extends `doc-${infer T}`
    ? T
    : never;

interface Props {
    doc: DocName;
    slug: CollectionEntry<`doc-${DocName}`>['slug'];
    noPageHeadings?: boolean;
    noSidebar?: boolean;
    containerWidth?: number;
}

const { doc, noPageHeadings, noSidebar } = Astro.props;
const collection = `doc-${doc}` satisfies CollectionKey;

const slug = Astro.props.slug.endsWith('/')
    ? Astro.props.slug.slice(0, -1)
    : Astro.props.slug;
const entry = await getEntry(collection, slug);

if (!entry) {
    throw new Error(`Entry not found: doc=${doc}, slug=${slug}`);
}

const [{ Content, headings }, sidebarItems, breadcrumb] = await Promise.all([
    entry.render(),
    generateSidebar(collection),
    generateBreadcrumb(collection, slug),
]);

const sidebarIndex = sidebarItems.flat.findIndex((item) => item.slug === slug);
const prev = findPreviousPage(sidebarItems.flat, sidebarIndex);
const next =
    findNextPage(sidebarItems.flat, sidebarIndex) ?? sidebarItems.flat[0];

function filteredHeadings() {
    if (
        headings[0]?.text ===
            (entry as CollectionEntry<CollectionKey>).data.title ||
        headings[0]?.text ===
            (entry as CollectionEntry<Exclude<CollectionKey, 'labs-items'>>)
                .data.sidebar_label
    ) {
        return headings.slice(1);
    }

    return headings;
}

const meta = metadata[collection];
const thumbnail = 'thumbnail' in meta ? meta.thumbnail.src : ThumbnailDocs.src;
---

<style>
	@reference "@src/styles/global.css";

	:global(#sidebar-toggle:not(:checked))
		~ div
		:global(.flag-sidebar-container) {
		@apply max-lg:-translate-x-full;
	}

	/* Table of contents scrollbar styling */
	.toc-container > div {
		scrollbar-width: thin;
		scrollbar-color: rgb(var(--color-border)) transparent;
	}
	
	.toc-container > div::-webkit-scrollbar {
		width: 6px;
	}
	
	.toc-container > div::-webkit-scrollbar-track {
		background: transparent;
	}
	
	.toc-container > div::-webkit-scrollbar-thumb {
		background-color: rgb(var(--color-border));
		border-radius: 3px;
	}
	
	.toc-container > div::-webkit-scrollbar-thumb:hover {
		background-color: rgb(var(--color-text) / 0.3);
	}
</style>

<BaseLayout
	title={entry.data.title}
	description={entry.data.description}
	image={thumbnail}
>
	<div class="flex-1 flex min-h-0">
		<!-- Sidebar -->
		{
			!noSidebar && (
				<div
					class:list={[
						"w-full lg:w-[350px] flex-shrink-0 border-r border-border bg-background-tertiary flag-sidebar-container z-10",
						"max-lg:fixed inset-0 max-lg:top-14 max-lg:left-0 transition-transform duration-300",
					]}
				>
					<Sidebar
						items={sidebarItems.items}
						collection={collection}
					/>
				</div>
			)
		}

		<!-- Document -->
		<div class="flex-1 overflow-y-scroll">
			<div class="flex flex-row">
				<!-- Article -->
				<div class="flex-1">
					<div
						class={cn(
							"w-full mx-auto py-6 px-4 sm:px-8 space-y-8 box-border",
							!noSidebar ? "max-w-[960px]" : "max-w-[1300px]",
						)}
					>
						<div
							class="flex items-center gap-3 pb-4 overflow-x-auto"
						>
							<a
								href={`${import.meta.env.BASE_URL}/${doc.startsWith("sdk-") ? `sdk/${doc.slice(4)}` : doc}`}
								class="!text-text/60"
							>
								<Icon name="fa6-solid:house" class="w-3.5" />
							</a>
							{
								breadcrumb.items.map(({ title, href }) => (
									<>
										<Icon
											name="fa6-solid:chevron-right"
											class="w-1.5 min-w-1.5 !text-text/40"
										/>
										{href === undefined ? (
											<p class="!text-text/60 font-extralight whitespace-nowrap cursor-not-allowed">
												{title}
											</p>
										) : (
											<a
												href={href}
												class="!text-text/60 font-extralight whitespace-nowrap"
											>
												{title}
											</a>
										)}
									</>
								))
							}
						</div>
						<MarkdownContainer
							class="flag-page-headings-content flag-page-content"
						>
							<Content />
						</MarkdownContainer>
						<div
							class="pt-10 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"
						>
							<a
								href={`https://github.com/surrealdb/docs.surrealdb.com/edit/main/src/content/${collection}/${entry.id}`}
								class="!text-surreal-pink flex items-center gap-2.5"
							>
								<Icon name="fa6-solid:pencil" class="w-3" />
								Edit this page on GitHub
							</a>
							<button
								class="text-surreal-pink flex items-center gap-2.5 copy-markdown-btn min-w-[160px] whitespace-nowrap self-start sm:self-auto"
								data-url={`https://raw.githubusercontent.com/surrealdb/docs.surrealdb.com/main/src/content/${collection}/${entry.id}`}
							>
								<Icon name="fa6-solid:copy" class="w-3" />
								Copy page as Markdown
							</button>
						</div>
						<div>
							<div class="flex justify-between gap-8">
								{
									prev && (
										<a
											href={prev.href}
											class="!text-faint hover:!text-surreal-pink hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20"
										>
											<Icon
												name="fa6-solid:chevron-left"
												class="w-3"
											/>
											<span>{prev.title}</span>
										</a>
									)
								}
								{
									next && (
										<a
											href={next.href}
											class="!text-faint hover:!text-surreal-pink hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20 justify-end"
										>
											<span>{next.title}</span>
											<Icon
												name="fa6-solid:chevron-right"
												class="w-3"
											/>
										</a>
									)
								}
							</div>
						</div>
					</div>
				</div>

				<!-- Table of contents -->
				<div
					class="pt-6 w-[350px] hidden 2xl:block flex-shrink-0"
				>
					<div
						class="sticky top-4 h-[calc(100svh-8.5rem)] px-3 border-l border-border py-2 flex flex-col toc-container"
					>
						<div class="flex flex-col gap-3 overflow-y-auto min-h-0 flex-1">
						{
							!noPageHeadings &&
								filteredHeadings().length > 0 && (
									<>
										<h3 class="uppercase font-mono text-xs font-semibold">
											On this page
										</h3>
										<PageHeadings
											headings={filteredHeadings()}
											client:load
										/>
									</>
								)
						}
						<div class="pt-3 border-t border-border">
							<span
								class="text-text/60 text-xs flex items-center gap-1.5"
							>
								<Icon name="fa6-solid:clock" class="w-3" />
								Last updated: <span
									class="last-edited-date"
									data-file-path={`src/content/${collection}/${entry.id}`}
									>Loading...</span
								>
							</span>
						</div>

						<!-- Page Feedback -->
						<div class="pt-3 border-t border-border">
							<div class="flex flex-col gap-3">
								<h3
									class="uppercase font-mono text-xs font-semibold"
								>
									Was this page helpful?
								</h3>
								<div class="flex gap-2">
									<button
										class="feedback-btn feedback-positive p-2 rounded-lg border border-border hover:border-surreal-pink transition-colors"
										data-feedback="positive"
									>
										<Icon
											name="fa6-solid:thumbs-up"
											class="w-4 h-4"
										/>
									</button>
									<button
										class="feedback-btn feedback-negative p-2 rounded-lg border border-border hover:border-surreal-pink transition-colors"
										data-feedback="negative"
									>
										<Icon
											name="fa6-solid:thumbs-down"
											class="w-4 h-4"
										/>
									</button>
								</div>

								<!-- Feedback Forms -->
								<div class="feedback-forms hidden">
									<!-- Positive Feedback Form -->
									<div
										class="feedback-form positive-feedback hidden"
									>
										<h4 class="text-sm font-semibold mb-3">
											What did you like?
										</h4>
										<div class="flex flex-col gap-2 mb-3">
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="positive-feedback"
													value="accurate"
													class="w-3 h-3"
												/>
												<span>Accurate</span>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="positive-feedback"
													value="easy-to-understand"
													class="w-3 h-3"
												/>
												<span>Easy to understand</span>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="positive-feedback"
													value="solved-problem"
													class="w-3 h-3"
												/>
												<span>Solved my problem</span>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="positive-feedback"
													value="helped-decide"
													class="w-3 h-3"
												/>
												<span
													>Helped me decide to use the
													product</span
												>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="positive-feedback"
													value="other"
													class="w-3 h-3"
												/>
												<span>Other</span>
											</label>
										</div>
										<textarea
											placeholder="Tell us more about your experience"
											class="w-full p-2 text-xs bg-background-tertiary border border-border rounded resize-none h-20"
										></textarea>
										<div class="flex gap-2 mt-3">
											<button
												class="feedback-submit bg-surreal-pink text-white px-3 py-1 rounded text-xs hover:bg-surreal-pink/80 transition-colors"
											>
												Submit
											</button>
											<button
												class="feedback-cancel text-text/60 px-3 py-1 rounded text-xs hover:text-text transition-colors"
											>
												Cancel
											</button>
										</div>
									</div>

									<!-- Negative Feedback Form -->
									<div
										class="feedback-form negative-feedback hidden"
									>
										<h4 class="text-sm font-semibold mb-3">
											What went wrong?
										</h4>
										<div class="flex flex-col gap-2 mb-3">
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="negative-feedback"
													value="hard-to-understand"
													class="w-3 h-3"
												/>
												<span>Hard to understand</span>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="negative-feedback"
													value="incorrect-info"
													class="w-3 h-3"
												/>
												<span
													>Incorrect information</span
												>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="negative-feedback"
													value="missing-info"
													class="w-3 h-3"
												/>
												<span
													>Missing the information</span
												>
											</label>
											<label
												class="flex items-center gap-2 text-xs"
											>
												<input
													type="radio"
													name="negative-feedback"
													value="other"
													class="w-3 h-3"
												/>
												<span>Other</span>
											</label>
										</div>
										<textarea
											placeholder="Tell us more about your experience"
											class="w-full p-2 text-xs bg-background-tertiary border border-border rounded resize-none h-20"
										></textarea>
										<div class="flex gap-2 mt-3">
											<button
												class="feedback-submit bg-surreal-pink text-white px-3 py-1 rounded text-xs hover:bg-surreal-pink/80 transition-colors"
											>
												Submit
											</button>
											<button
												class="feedback-cancel text-text/60 px-3 py-1 rounded text-xs hover:text-text transition-colors"
											>
												Cancel
											</button>
										</div>
									</div>
								</div>

								<!-- Action Buttons -->
								<div class="flex gap-2 mt-2">
									<a
										href={`https://github.com/surrealdb/docs.surrealdb.com/edit/main/src/content/${collection}/${entry.id}`}
										class="flex items-center gap-1.5 px-2 py-1 rounded text-xs border border-border hover:border-surreal-pink transition-colors"
									>
										<Icon
											name="fa6-solid:pencil"
											class="w-3 h-3"
										/>
										Edit
									</a>
									<a
										href="https://github.com/surrealdb/docs.surrealdb.com/issues/new"
										class="flex items-center gap-1.5 px-2 py-1 rounded text-xs border border-border hover:border-surreal-pink transition-colors"
									>
										<Icon
											name="fa6-brands:github"
											class="w-3 h-3"
										/>
										Issue
									</a>
								</div>
							</div>
						</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Footer -->
			<Footer />
		</div>
	</div>
</BaseLayout>

<script>
	async function fetchLastEditedDate(filePath: string): Promise<[string, string]> {
		try {
			// Use GitHub API to get the last commit for the file
			const apiUrl = `https://api.github.com/repos/surrealdb/docs.surrealdb.com/commits?path=${encodeURIComponent(filePath)}&per_page=1`;
			const response = await fetch(apiUrl);

			if (!response.ok) {
				throw new Error(`GitHub API error: ${response.status}`);
			}

			const commits = (await response.json()) as any[];

			if (commits.length === 0) {
				return ["Unknown", ""];
			}

			const lastCommit = commits[0];
			const commitDate = new Date(lastCommit.commit.author.date);

			// Format the date like "Sep 6, 2024"
			const months = [
				"Jan",
				"Feb",
				"Mar",
				"Apr",
				"May",
				"Jun",
				"Jul",
				"Aug",
				"Sep",
				"Oct",
				"Nov",
				"Dec",
			];
			const month = months[commitDate.getMonth()];
			const day = commitDate.getDate();
			const year = commitDate.getFullYear();

			return [`${month} ${day}, ${year}`, commitDate.toISOString()];
		} catch (error) {
			console.error("Failed to fetch last edited date:", error);
			return ["Unknown", ""];
		}
	}

	document.querySelectorAll(".last-edited-date").forEach(async (element) => {
		const filePath = element.getAttribute("data-file-path");
		if (filePath) {
			const [formattedDate, isoDate] = await fetchLastEditedDate(filePath);
			element.textContent = formattedDate;
			element.setAttribute("data-last-edited-date", isoDate);
		}
	});

	// Add copy markdown functionality
	document.querySelectorAll(".copy-markdown-btn").forEach((btn) => {
		btn.addEventListener("click", async () => {
			const url = btn.getAttribute("data-url");
			if (!url) return;
			const originalText = btn.innerHTML;
			try {
				const response = await fetch(new URL(url));
				const text = await response.text();
				// Try modern clipboard API first
				try {
					await navigator.clipboard.writeText(text);
				} catch (err) {
					// Fallback for clipboard copy (deprecated, but still needed for mobile/old browsers)
					const textarea = document.createElement("textarea");
					textarea.value = text;
					textarea.style.position = "fixed";
					textarea.style.opacity = "0";
					document.body.appendChild(textarea);
					textarea.focus();
					textarea.select();
					document.execCommand("copy");
					document.body.removeChild(textarea);
				}
				// Visual feedback
				btn.innerHTML =
					'<Icon name="fa6-solid:check" class="w-3" /> Copied!';
				setTimeout(() => {
					btn.innerHTML = originalText;
				}, 2000);
			} catch (err) {
				console.error("Failed to copy markdown:", err);
				btn.innerHTML =
					'<Icon name="fa6-solid:xmark" class="w-3" /> Failed to copy';
				setTimeout(() => {
					btn.innerHTML = originalText;
				}, 2000);
				alert(
					"Failed to copy markdown. Please try manually selecting and copying the text.",
				);
			}
		});
	});

	// Page feedback functionality
	document.addEventListener("DOMContentLoaded", () => {
		const feedbackBtns = document.querySelectorAll(".feedback-btn");
		const feedbackForms = document.querySelector(".feedback-forms");
		const positiveForm = document.querySelector(".positive-feedback");
		const negativeForm = document.querySelector(".negative-feedback");
		const cancelBtns = document.querySelectorAll(".feedback-cancel");
		const submitBtns = document.querySelectorAll(".feedback-submit");

		// Handle feedback button clicks
		feedbackBtns.forEach((btn) => {
			btn.addEventListener("click", () => {
				const feedbackType = btn.getAttribute("data-feedback");

				// Hide all forms first
				positiveForm?.classList.add("hidden");
				negativeForm?.classList.add("hidden");
				feedbackForms?.classList.add("hidden");

				// Show the appropriate form
				if (feedbackType === "positive") {
					positiveForm?.classList.remove("hidden");
					feedbackForms?.classList.remove("hidden");
				} else if (feedbackType === "negative") {
					negativeForm?.classList.remove("hidden");
					feedbackForms?.classList.remove("hidden");
				}

				// Add visual feedback to buttons
				feedbackBtns.forEach((b) =>
					b.classList.remove(
						"border-surreal-pink",
						"bg-surreal-pink/10",
					),
				);
				btn.classList.add("border-surreal-pink", "bg-surreal-pink/10");
			});
		});

		// Handle cancel button clicks
		cancelBtns.forEach((btn) => {
			btn.addEventListener("click", () => {
				// Hide all forms
				feedbackForms?.classList.add("hidden");
				positiveForm?.classList.add("hidden");
				negativeForm?.classList.add("hidden");

				// Reset button states
				feedbackBtns.forEach((b) =>
					b.classList.remove(
						"border-surreal-pink",
						"bg-surreal-pink/10",
					),
				);

				// Clear form inputs
				document
					.querySelectorAll('input[type="radio"]')
					.forEach((radio) => {
						(radio as HTMLInputElement).checked = false;
					});
				document.querySelectorAll("textarea").forEach((textarea) => {
					(textarea as HTMLTextAreaElement).value = "";
				});
			});
		});

		// Handle submit button clicks
		submitBtns.forEach((btn) => {
			btn.addEventListener("click", async () => {
				const form = btn.closest(".feedback-form");
				if (!form) return;

				const isPositive = form.classList.contains("positive-feedback");
				const radioName = isPositive
					? "positive-feedback"
					: "negative-feedback";
				const selectedRadio = form.querySelector(
					`input[name="${radioName}"]:checked`,
				) as HTMLInputElement;
				const textarea = form.querySelector(
					"textarea",
				) as HTMLTextAreaElement;
				const element = document.querySelector(
					".last-edited-date",
				) as HTMLSpanElement;

				if (!selectedRadio) {
					alert("Please select an option before submitting.");
					return;
				}

				const feedbackData = {
					positive: isPositive,
					category: selectedRadio.value,
					comment: textarea.value,
					page: window.location.pathname,
					pageTitle: document.title,
					pageLastUpdated: element.dataset["lastEditedDate"],
					timestamp: new Date().toISOString(),
				};

				console.log(feedbackData);

				try {
					// TODO: Replace with actual Notion API endpoint
					// For now, just log the data and show success message
					const response = await fetch(
						"https://website-06bs2st681qcl18a0ee0iqak54.aws-euw1.surreal.cloud/api/surrealdb/documentation/feedback",
						{
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								Accept: "application/json",
							},
							body: JSON.stringify(feedbackData),
						},
					);

					if (!response.ok) {
						throw new Error("Failed to submit feedback");
					}

					// Show success message
					btn.textContent = "Submitted!";
					btn.classList.add("bg-green-600");

					// Reset form after 2 seconds
					setTimeout(() => {
						feedbackForms?.classList.add("hidden");
						positiveForm?.classList.add("hidden");
						negativeForm?.classList.add("hidden");
						feedbackBtns.forEach((b) =>
							b.classList.remove(
								"border-surreal-pink",
								"bg-surreal-pink/10",
							),
						);
						btn.textContent = "Submit";
						btn.classList.remove("bg-green-600");

						// Clear form inputs
						document
							.querySelectorAll('input[type="radio"]')
							.forEach((radio) => {
								(radio as HTMLInputElement).checked = false;
							});
						document
							.querySelectorAll("textarea")
							.forEach((textarea) => {
								(textarea as HTMLTextAreaElement).value = "";
							});
					}, 2000);
				} catch (error) {
					console.error("Error submitting feedback:", error);
					alert("Failed to submit feedback. Please try again.");
				}
			});
		});
	});
</script>
