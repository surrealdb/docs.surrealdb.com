---
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import type { CollectionKey } from 'astro:content';
import ThumbnailDocs from '@assets/img/thumbnails/documentation.jpg';
import { PageHeadings } from '@components/PageHeadings.tsx';
import Sidebar from '@components/Sidebar/index.astro';
import {
    findNextPage,
    findPreviousPage,
    generateBreadcrumb,
    generateSidebar,
} from '@src/util/doc';
import { Icon } from 'astro-icon/components';
import BaseLayout from './layout/BaseLayout.astro';
import Footer from './layout/Footer/Footer.astro';
import MarkdownContainer from './shared/MarkdownContainer.astro';

import { metadata } from './Sidebar/metadata';

type DocName = CollectionKey extends `doc-${infer T}` ? T : never;

type Props = {
    doc: DocName;
    slug: CollectionEntry<`doc-${DocName}`>['slug'];
    noPageHeadings?: boolean;
};

const { doc, noPageHeadings } = Astro.props;
const collection = `doc-${doc}` satisfies CollectionKey;

const slug = Astro.props.slug.endsWith('/')
    ? Astro.props.slug.slice(0, -1)
    : Astro.props.slug;
const entry = await getEntry(collection, slug);
if (!entry) {
    throw new Error(`Entry not found: doc=${doc}, slug=${slug}`);
}

const { Content, headings } = await entry.render();
const sidebarItems = await generateSidebar(collection);
const sidebarIndex = sidebarItems.flat.findIndex((item) => item.slug === slug);
const prev = findPreviousPage(sidebarItems.flat, sidebarIndex);
const next =
    findNextPage(sidebarItems.flat, sidebarIndex) ?? sidebarItems.flat[0];

function filteredHeadings() {
    if (
        headings[0]?.text ===
            (entry as CollectionEntry<CollectionKey>).data.title ||
        headings[0]?.text ===
            (entry as CollectionEntry<CollectionKey>).data.sidebar_label
    ) {
        return headings.slice(1);
    }

    return headings;
}

const breadcrumb = await generateBreadcrumb(collection, slug);
const meta = metadata[collection];

const thumbnail = 'thumbnail' in meta ? meta.thumbnail.src : ThumbnailDocs.src;
---

<style>
    :global(#sidebar-toggle:not(:checked)) ~ div :global(.flag-sidebar-container) {
        @apply max-lg:-translate-x-full;
    }
</style>

<BaseLayout
    title={entry.data.title}
    description={entry.data.description}
	image={thumbnail}
>
    <div class="flex flex-col bg-background flex-grow justify-between">

		<div class="flex">
			<!-- Sidebar -->
			<div class:list={[
				"w-full lg:w-[350px] flex-shrink-0 border-r border-border bg-background flag-sidebar-container z-10",
				"max-lg:fixed max-lg:top-14 max-lg:left-0 transition-transform duration-300"
			]}>
				<div class="sticky top-0" style={{ height: "calc(100vh - 56px)" }}>
					<Sidebar items={sidebarItems.items} collection={collection} />
				</div>
			</div>
	
			<!-- Document -->
			<div class="flex-1">
				<div class="w-screen max-w-[960px] mx-auto py-6 px-8 space-y-8 flex-grow">
					<div class="flex items-center gap-3 pb-4 overflow-x-auto">
						<a href={`${import.meta.env.BASE_URL}/${doc.startsWith('sdk-') ? `sdk/${doc.slice(4)}` : doc}`} class="text-text/60">
							<Icon name="fa6-solid:house" class="w-3.5" />
						</a>
						{breadcrumb.items.map(({ title, href }) => (
							<>
								<Icon name="fa6-solid:chevron-right" class="w-1.5 min-w-1.5 text-text/40" />
								{href === undefined ? (
									<p class="text-text/60 font-extralight whitespace-nowrap cursor-not-allowed">
										{title}
									</p>
								) : (
									<a href={href} class="text-text/60 font-extralight whitespace-nowrap">
										{title}
									</a>
								)}
							</>
						))}
					</div>
					<MarkdownContainer class='flag-page-headings-content flag-page-content'>
						<Content />
					</MarkdownContainer>
					<div class="pt-10">
						<a href={`https://github.com/surrealdb/docs.surrealdb.com/edit/main/src/content/${collection}/${entry.id}`} class="text-surreal-pink flex items-center gap-2.5">
							<Icon name="fa6-solid:pencil" class="w-3" />
							Edit this page on GitHub
						</a>
					</div>
					<div>
						<div class="flex justify-between gap-8">
							{prev && (
								<a href={prev.href} class="text-faint hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20">
									<Icon name="fa6-solid:chevron-left" class="w-3" />
									<span>{prev.title}</span>
								</a>
							)}
							{next && (
								<a href={next.href} class="text-faint hover:border-surreal-pink flex items-center gap-2.5 border border-border rounded-lg py-3 px-6 w-1/2 min-h-20 justify-end">
									<span>{next.title}</span>
									<Icon name="fa6-solid:chevron-right" class="w-3" />
								</a>
							)}
						</div>
					</div>
				</div>
			</div>
	
			<!-- Table of contents -->
			<div class="w-[350px] hidden 3xl:block flex-shrink-0 max-lg:hidden">
				{!noPageHeadings && filteredHeadings().length > 0 && (
					<div class="sticky my-4 top-4 overflow-y-auto max-h-[calc(100vh-2rem)]">
						<div class="px-3 border-l border-border py-2 flex flex-col gap-3">
							<h3 class="uppercase font-mono text-xs font-semibold">On this page</h3>
							<PageHeadings headings={filteredHeadings()} client:load />
						</div>
					</div>
				)}
			</div>
		</div>

		<Footer />
    </div>
</BaseLayout>
