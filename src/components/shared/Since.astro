---
type Version = `v${number}.${number | 'x'}${string}`;

interface Props {
    v: Version;
    prefix?: string | false;
}

const { v, prefix } = Astro.props;

// Regular expression to validate the version format, supporting both x and pre-release versions
const versionRegex = /^v?\d+\.(x|\d+)(\.\d+)?(-[a-zA-Z]+[.-]\d+)?$/;

// Check if the passed version matches the expected format
if (!versionRegex.test(v)) {
    throw new Error(`Error: Version ${v} is not recognized.`);
}
---

<style>
    p {
        @apply flex w-fit h-6 items-center whitespace-nowrap rounded border px-2 font-mono text-xs uppercase leading-[0] border-label-purple !text-label-purple;
    }

    @media (prefers-color-scheme: light) {
        p {
            @apply bg-label-purple !text-white
        }
    }
</style>

<p>
    {prefix !== false && (prefix ?? "Available since: ")}{v}
</p>
