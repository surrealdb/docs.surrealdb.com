---
import { Icon } from 'astro-icon/components';

interface Props {
    isMobile: boolean;
}
---

<style>
    search-dialog :global(.docs-search-result) {
        @apply block px-6 py-4 hover:bg-bwr/10;

        & :global(h3) {
            @apply text-2xl;
        }

        & :global(span) {
            @apply text-surreal-pink text-xs pb-1 block;
        }

        & :global(p) {
            @apply text-text/80 font-normal text-sm;

            & :global(span) {
                @apply text-text/100;
            }
        }
    }

	search-dialog :global(.search-shortcut) {
		@apply max-md:hidden;
	}

    search-dialog :global(.docs-search-message) {
        @apply w-full h-full flex items-center justify-center text-lg text-text/50;
    }

	search-dialog :global(.loader) {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		position: relative;
		animation: rotate 0.5s linear infinite;
    }

	search-dialog :global(.loader)::before {
		content: "";
		box-sizing: border-box;
		position: absolute;
		inset: 0px;
		border-radius: 50%;
		border: 3px solid;
		animation: prixClipFix 1s linear infinite alternate-reverse;

		@apply border-surreal-pink
	}

    @keyframes rotate {
		100%   {transform: rotate(360deg)}
    }

    @keyframes prixClipFix {
        0%   {clip-path:polygon(50% 50%,0 0,0 0,0 0,0 0,0 0)}
        25%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 0,100% 0,100% 0)}
        50%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,100% 100%,100% 100%)}
        75%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 100%)}
        100% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 0)}
    }
</style>

<search-dialog data-is-mobile={Astro.props.isMobile ? "" : undefined}>
    <button class="search-trigger flex items-center justify-between gap-6 bg-code rounded-lg border border-border w-full text-sm text-text/80 font-light py-2 px-3">
        <div class="flex items-center gap-2">
            <Icon name="fa6-solid:magnifying-glass" class="w-4 h-4" />
            Search the docs
        </div>
        <span class="search-shortcut bg-background/30 py-0.5 px-2 font-mono rounded text-text" />
    </button>
    <dialog class="fixed top-0 right-0 bottom-0 left-0 m-auto w-[900px] h-[700px] bg-background-secondary rounded-xl border-border border text-bwr outline-none backdrop:bg-background/50 backdrop:backdrop-blur-md transition-all">
        <div class="dialog-content h-full w-full flex flex-col">
            <div class="border-border border-b flex gap-4 items-center px-6 ">
				<Icon name="fa6-solid:magnifying-glass" class="w-4 h-4" />
				<input class="bg-background-secondary py-5 outline-none text-lg flex-1" placeholder="Search the docs" />
				<span class="loader"></span>
			</div>
            <div class="search-results relative flex-grow overflow-y-auto">
                <p class="docs-search-message">
                    Enter a search query
                </p>
            </div>
        </div>
    </dialog>
</search-dialog>

<script>
    class Search extends HTMLElement {
		#keybindHandler!: (e: KeyboardEvent) => void;
		#isMac: boolean = false;

        connectedCallback() {
            const trigger = this.querySelector('.search-trigger');
            const shortcut = this.querySelector('.search-shortcut');
            const input = this.querySelector('input');
            const dialog = this.querySelector('dialog');
            const dialogContent = this.querySelector('dialog .dialog-content');
            const searchResults = this.querySelector('dialog .search-results');
			const loader = this.querySelector<HTMLSpanElement>('.loader');
            if (!trigger || !shortcut || !dialog || !dialogContent || !searchResults || !input || !loader) throw new Error("Search element is broken")

			loader.style.display = "none";

            trigger.addEventListener('click', () => {
                dialog.showModal()
            });

            dialog.addEventListener('click', () => {
                dialog.close()
            });

            dialogContent.addEventListener('click', (e) => {
                e.stopPropagation();
            });

			const isMac = /Macintosh|Mac OS X/.test(navigator.userAgent);
			const searchKey = isMac ? 'âŒ˜' : 'Ctrl';

			shortcut.innerHTML = `${searchKey} /`;
			this.#isMac = isMac;

			this.#keybindHandler = this.handleKeybind.bind(this);
			document.addEventListener('keydown', this.#keybindHandler);

            function setMessage(message: string) {
                const el = document.createElement("p");
                el.classList.add("docs-search-message");
                el.innerText = message;
                searchResults!.innerHTML = "";
                searchResults!.appendChild(el);
            }

            let timeout: unknown;
            input.addEventListener('input', () => {
                if (timeout) clearTimeout(timeout as number);
                timeout = setTimeout(async () => {
                    if (input.value.length === 0) {
                        setMessage("Enter a search query");
                    } else {
						loader.style.display = "block";
                        const results = await search(input.value);
						loader.style.display = "none";
                        searchResults.innerHTML = "";
                        if (results.length > 0) {
                            for (const result of results) {
                                const rendered = createResult(result);
                                searchResults.appendChild(rendered);
                            }
                        } else {
                            setMessage("No results found");
                        }
                    }
                }, 300);
            });
        }

		disconnectedCallback() {
			document.removeEventListener('keydown', this.#keybindHandler);
		}

		handleKeybind(e: KeyboardEvent) {

			if(this.dataset.isMobile === '') {
				return;
			}

			if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
				return;
			}

			if (e.key === '/' && (this.#isMac ? e.metaKey : e.ctrlKey)) {
				e.preventDefault();
				const trigger = this.querySelector<HTMLDivElement>('.search-trigger');
				if (trigger) {
					trigger.click();

				}
			}
		}

    }

    customElements.define('search-dialog', Search);

    export interface Doc {
    	url: string;
    	title: string;
        description: string;
    	content: string[];
    	score: number;
    	hostname: string;
    }

    export async function search(keywords: string): Promise<Doc[]> {
        const docs = await req(keywords);
      	return docs as Doc[];
    }

    function getHostname() {
    	const mapped: Record<string, string> = {
    		'surrealdb.com': 'main--surrealdb-docs.netlify.app',
    		'www.surrealdb.com': 'main--surrealdb-docs.netlify.app',
    		'docs.surrealdb.com': 'main--surrealdb-docs.netlify.app',
    		'surrealdb-docs.netlify.app': 'main--surrealdb-docs.netlify.app',
    		'localhost': 'main--surrealdb-docs.netlify.app',
    	};

    	return mapped[location.hostname] || location.hostname;
    }

    async function req(keywords: string): Promise<Doc[]> {
        const params = new URLSearchParams({
            hostname: getHostname(),
            query: keywords,
        });
    	return await fetch(`https://surrealdb.com/api/docs/search?${params}`)
            .then(res => res.json());
    }

    function createResult(
        doc: Doc
    ): HTMLElement {
        const result = document.createElement("a");
        result.href = doc.url;
        result.classList.add("docs-search-result");

        const title = document.createElement("h3");
        title.innerText = doc.title;
        result.appendChild(title);

        const link = document.createElement("span");
        link.innerText = doc.url;
        result.appendChild(link);

        const desc = document.createElement("p");
		desc.innerText = doc.description;
		result.appendChild(desc);

        return result;
    }
</script>
