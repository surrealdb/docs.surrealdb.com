---
import { at } from '@src/util/helpers';
import { cn } from '@src/util/tailwind';

type Props = {
    dropdownClass?: string;
    withHoverTrigger?: boolean;
};

const { dropdownClass, withHoverTrigger } = Astro.props;

const id = Array.from({ length: 8 }, () => Math.random().toString(36)[2]).join(
    ''
);
---

<style>
    :global(.dropdown-toggle:not(:checked)) ~ label :global(.dropdown-dropdown) {
        @apply scale-y-0;
    }
</style>

<drop-down data-hover={at(withHoverTrigger)}>
	<input type="checkbox" id={id} class="dropdown-toggle hidden" />
    <label for={id} class="block relative">
		<slot />
		<div class="dropdown-dropdown absolute pt-3 left-0 min-w-full transition-transform origin-top">
			<div class={cn("bg-background-secondary p-2 rounded-lg border-border border min-w-full shadow-lg shadow-background", dropdownClass)}>
				<slot name="dropdown" />
			</div>
		</div>
	</label>
</drop-down>

<script>
    class Dropdown extends HTMLElement {
		#globalHandler!: (e: Event) => void;
		
        connectedCallback() {
			this.#globalHandler = this.handleGlobalClick.bind(this);
            document.addEventListener('click', this.#globalHandler);

			if (this.hasAttribute('data-hover')) {
				this.addEventListener('mouseenter', () => {
					const el = this.querySelector<HTMLInputElement>('.dropdown-toggle');
					if (el) {
						el.checked = true;
					}
				});
				
				this.addEventListener('mouseleave', () => {
					const el = this.querySelector<HTMLInputElement>('.dropdown-toggle');
					if (el) {
						el.checked = false;
					}
				});
			}
        }

		disconnectedCallback() {
			document.removeEventListener('click', this.#globalHandler);
		}

		handleGlobalClick(e: Event) {
			if (!(e.target instanceof HTMLElement)) return;

			if (!this.contains(e.target)) {
				const el = this.querySelector<HTMLInputElement>('.dropdown-toggle');
				
				if (el) {
					el.checked = false;
				}
			}
		}
    }

    customElements.define('drop-down', Dropdown);
</script>
