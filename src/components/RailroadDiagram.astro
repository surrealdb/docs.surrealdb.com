---
import rrCssUrl from '../styles/vendor/railroad-diagrams.css?url';
// Use Astro.resolve to serve the vendored CSS in dev and bundle in prod
import { type RailroadNode, svgFromAst } from '../util/railroad';
// Props: either provide a JSON AST via `ast`, or raw `svg`.
// Optional: `padding` to override default paddings on the diagram root.
interface Props {
    ast?: RailroadNode;
    svg?: string;
    padding?:
        | number
        | [number]
        | [number, number]
        | [number, number, number, number];
    className?: string;
}

const { ast, svg, padding, className } = Astro.props as Props;

let svgMarkup: string | undefined = svg;
if (!svgMarkup && ast) {
    svgMarkup = svgFromAst(ast, padding);
}

// Make SVG responsive to the page/container width
if (svgMarkup) {
    svgMarkup = svgMarkup
        // inject inline background override on the <svg> itself
        .replace(
            /<svg(\s)/i,
            '<svg style="background:rgba(var(--color-code),1);background-color:rgba(var(--color-code),1);" preserveAspectRatio="xMidYMin meet" '
        )
        // remove any inline background so CSS controls theming fully on other attrs
        .replace(/\sbackground(-color)?=\"[^\"]*\"/gi, '');
}

// Ensure the package CSS is available on the page.
// Consumers can also include this globally if preferred.
---
<link rel="stylesheet" href={rrCssUrl} />

<div class={`rr-scroll ${className ?? ''}`} style="overflow-x:auto;">
  <div set:html={svgMarkup} />
</div>
<div class="rr-bottom-indicator mb-2">
  <!-- <div class="rr-track"><div class="rr-thumb"></div></div> -->
  <!-- <div class="rr-label"></div> -->
</div>
<br/>
  <style>
    /* Let the SVG size to its intrinsic width so it can scroll horizontally */
    :root svg.railroad-diagram { display: block; max-width: none; }
    /* Theme alignment for SurrealDB (light/dark via CSS variables) */
    :root svg.railroad-diagram { 
      background: rgba(var(--color-code),1) !important;
      background-color: rgba(var(--color-code),1) !important;
      box-shadow: 0 2px 8px 0 rgba(0,0,0,0.08), 0 0 0 2px rgba(var(--color-surreal-pink),0.15);
      border-radius: 6px;
    }
    :root svg.railroad-diagram path { stroke: rgba(var(--color-text), 0.85) !important; fill: transparent !important; }
    /* Dark mode overrides: support media query and class/data attribute based theming */
    @media (prefers-color-scheme: dark) {
      :root svg.railroad-diagram { background: rgb(26, 24, 35) !important; background-color: rgb(26, 24, 35) !important; }
      :root svg.railroad-diagram path { stroke: rgba(255, 255, 255, 1) !important; }
      :root svg.railroad-diagram rect.background { fill: rgb(26, 24, 35) !important; }
    }
    html.dark svg.railroad-diagram,
    :root.dark svg.railroad-diagram,
    :root[data-theme='dark'] svg.railroad-diagram,
    body.dark svg.railroad-diagram {
      background: rgb(26, 24, 35) !important; background-color: rgb(26, 24, 35) !important;
    }
    html.dark svg.railroad-diagram rect.background,
    :root.dark svg.railroad-diagram rect.background,
    :root[data-theme='dark'] svg.railroad-diagram rect.background,
    body.dark svg.railroad-diagram rect.background {
      fill: rgb(26, 24, 35) !important;
    }
    html.dark svg.railroad-diagram path,
    :root.dark svg.railroad-diagram path,
    :root[data-theme='dark'] svg.railroad-diagram path,
    body.dark svg.railroad-diagram path {
      stroke: rgba(255, 255, 255, 1) !important;
    }
    :root svg.railroad-diagram text { fill: rgba(var(--color-text), 1) !important; font: 13px ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !important; }
    :root svg.railroad-diagram text.comment { fill: rgba(var(--color-faint), 1) !important; font-style: italic !important; font-size: 12px !important; }
    /* Default all boxes (terminals and non-terminals) */
    /* Background rect inside the SVG created by the library */
    :root svg.railroad-diagram rect.background { fill: rgba(var(--color-code), 1) !important; stroke: transparent !important; }
    /* Default all boxes (non-terminals) */
    :root svg.railroad-diagram g rect { fill: rgba(var(--color-background-secondary), 1) !important; stroke: rgba(var(--color-border), 1) !important; }
    /* Terminals have rounded corners in this library -> exclude the background rect */
    :root svg.railroad-diagram g rect[rx]:not(.background) { fill: rgba(var(--color-surreal-pink), 0.15) !important; stroke: rgba(var(--color-surreal-pink), 0.7) !important; }
    /* Basic bottom scroll indicator */
    .rr-bottom-indicator { display: none; gap: 8px; align-items: center; margin-top: 6px; }
    .rr-track { position: relative; height: 6px; flex: 1 1 auto; background: rgba(0,0,0,0.08); border-radius: 9999px; overflow: hidden; }
    .rr-thumb { position: absolute; top: 0; left: 0; height: 100%; width: 25%; background: rgba(var(--color-surreal-pink), 0.6); border-radius: 9999px; transition: left .08s linear, width .08s linear; }
    .rr-label { font-size: 12px; color: rgba(var(--color-text), 0.7); white-space: nowrap; }
    @media (prefers-color-scheme: dark) {
      .rr-track { background: rgba(255,255,255,0.12); }
      .rr-thumb { background: rgba(var(--color-surreal-pink), 0.7); }
      .rr-label { color: rgba(255,255,255,0.75); }
    }
    .rr-scroll.is-scrollable + .rr-bottom-indicator { display: flex; }
  </style>
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const update = (el) => {
        const scrollable = el.scrollWidth > el.clientWidth + 1; // tolerate subpixel
        el.classList.toggle('is-scrollable', scrollable);
        const indicator = el.nextElementSibling;
        if (!indicator || !indicator.querySelector) return;
        const thumb = indicator.querySelector('.rr-thumb');
        if (!scrollable) return;
        const visible = el.clientWidth;
        const total = el.scrollWidth;
        const ratio = Math.max(visible / total, 0.05); // minimum thumb size
        const maxLeft = 1 - ratio;
        const leftRatio = total <= visible ? 0 : (el.scrollLeft / (total - visible));
        thumb.style.width = (ratio * 100) + '%';
        thumb.style.left = (Math.min(Math.max(leftRatio, 0), maxLeft) * 100) + '%';
      };
      const ro = new ResizeObserver(entries => {
        for (const entry of entries) update(entry.target);
      });
      document.querySelectorAll('.rr-scroll').forEach((el) => {
        el.addEventListener('scroll', () => update(el), { passive: true });
        ro.observe(el);
        update(el);
      });
    });
  </script>
 


