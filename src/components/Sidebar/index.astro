---
import type { CollectionKey } from 'astro:content';
import { Icon } from 'astro-icon/components';
import Dropdown from '../Dropdown/Dropdown.astro';
import DropdownItem from '../Dropdown/DropdownItem.astro';
import Image from '../Image.astro';
import SidebarItem, {
    type SidebarItem as TSidebarItem,
} from './SidebarItem.astro';
import { metadata } from './metadata';

import DarkSurrealKV from '@img/icon/dark/kv.png';
import DarkSurrealDB from '@img/icon/dark/surrealdb.png';
import DarkSurrealist from '@img/icon/dark/surrealist.png';
import DarkSurrealML from '@img/icon/dark/surrealml.png';
import DarkSurrealQL from '@img/icon/dark/surrealql.png';
import DarkTutorials from '@img/icon/dark/tutorials.png';

import DarkDotnet from '@img/icon/dark/dotnet.png';
import DarkGolang from '@img/icon/dark/golang.png';
import DarkJava from '@img/icon/dark/java.png';
import DarkJavascript from '@img/icon/dark/javascript.png';
import DarkNodejs from '@img/icon/dark/nodejs.png';
import DarkPhp from '@img/icon/dark/php.png';
import DarkPython from '@img/icon/dark/python.png';
import DarkRust from '@img/icon/dark/rust.png';
import DarkWasm from '@img/icon/dark/webassembly.png';
import DarkCloud from '@img/image/cloud/surrealcloud.png';

import DarkBook from '@img/icon/dark/book.png';
import DarkSidekick from '@img/icon/dark/sidekick.png';
import DarkUniversity from '@img/icon/dark/university.png';

import LightSurrealKV from '@img/icon/light/kv.png';
import LightSurrealML from '@img/icon/light/ml-light.png';
import LightSurrealQL from '@img/icon/light/ql-light.png';
import LightSurrealDB from '@img/icon/light/surrealdb.png';
import LightSurrealist from '@img/icon/light/surrealist-light.png';
import LightTutorials from '@img/icon/light/tutorials-light.png';

import LightCloud from '@img/icon/light/cloud-light.png';
import LightDotnet from '@img/icon/light/dotnet.png';
import LightGolang from '@img/icon/light/golang.png';
import LightJava from '@img/icon/light/java.png';
import LightJavascript from '@img/icon/light/javascript.png';
import LightNodejs from '@img/icon/light/nodejs.png';
import LightPhp from '@img/icon/light/php.png';
import LightPython from '@img/icon/light/python.png';
import LightRust from '@img/icon/light/rust.png';
import LightWasm from '@img/icon/light/webassembly.png';

import LightBook from '@img/icon/light/book-light.png';
import LightSidekick from '@img/icon/light/sidekick-light.png';
import LightUniversity from '@img/icon/light/university-light.png';
import Search from '../Search.astro';

type Props = {
    items: TSidebarItem[];
    collection: CollectionKey;
};

const { items, collection } = Astro.props;
const doc = metadata[collection];
---

<div class="flex flex-col h-full">
    {doc && (
        <div class="flex flex-col p-6 gap-4 border-b border-border">
            <a href={import.meta.env.BASE_URL} class="px-4 flex items-center gap-1.5 text-sm group text-surreal-pink">
                <Icon name="fa6-solid:chevron-left" class="w-1.5 transition-transform group-hover:-translate-x-1" />
                Back to home
            </a>
            <Dropdown dropdownClass="right-auto w-[650px] hidden md:block">
				<div class="flex items-center gap-4 px-4 py-3 rounded-lg cursor-pointer relative select-none bg-code/75 hover:bg-code">
					<Image src={doc.icon} alt={doc.title} class="h-6 w-auto" />
					<h2 class="text-lg font-medium flex-1">{doc.title}</h2>
					<Icon name="fa6-solid:chevron-down" class="text-text/30 text-lg hidden md:block" />
				</div>
				<div slot="dropdown" class="grid grid-cols-3 gap-4">
					<div>
						<div class="mb-1 font-medium">
							Topics
						</div>
						<DropdownItem
							title="Surreal Cloud"
							icon={{ light: LightCloud, dark: DarkCloud }}
							href="/docs/cloud"
							active={collection === 'doc-cloud'}
						/>
						<DropdownItem
							title="SurrealDB"
							icon={{ light: LightSurrealDB, dark: DarkSurrealDB }}
							href="/docs/surrealdb"
							active={collection === 'doc-surrealdb'}
						/>
						<DropdownItem
							title="Surrealist"
							icon={{ light: LightSurrealist, dark: DarkSurrealist }}
							href="/docs/surrealist"
							active={collection === 'doc-surrealist'}
						/>
						<DropdownItem
							title="SurrealML"
							icon={{ light: LightSurrealML, dark: DarkSurrealML }}
							href="/docs/surrealml"
							active={collection === 'doc-surrealml'}
						/>
						<DropdownItem
							title="SurrealQL"
							icon={{ light: LightSurrealQL, dark: DarkSurrealQL }}
							href="/docs/surrealql"
							active={collection === 'doc-surrealql'}
						/>
						<DropdownItem
							title="SurrealKV"
							icon={{ light: LightSurrealKV, dark: DarkSurrealKV }}
							href="/docs/surrealkv"
							active={collection === 'doc-surrealkv'}
						/>
					</div>
					<div>
						<div class="mb-1 font-medium">
							SDKs
						</div>
						<DropdownItem
							title="Rust"
							icon={{ light: LightRust, dark: DarkRust }}
							href="/docs/sdk/rust"
							active={collection === 'doc-sdk-rust'}
						/>
						<DropdownItem
							title="JavaScript"
							icon={{ light: LightJavascript, dark: DarkJavascript }}
							href="/docs/sdk/javascript"
							active={collection === 'doc-sdk-javascript'}
						/>
						<DropdownItem
							title="Node.js"
							icon={{ light: LightNodejs, dark: DarkNodejs }}
							href="/docs/sdk/javascript/engines/node"
						/>
						<DropdownItem
							title="WebAssembly"
							icon={{ light: LightWasm, dark: DarkWasm }}
							href="/docs/sdk/javascript/engines/wasm"
						/>
						<DropdownItem
							title="Java"
							icon={{ light: LightJava, dark: DarkJava }}
							href="/docs/sdk/java"
							active={collection === 'doc-sdk-java'}
						/>
						<DropdownItem
							title="Golang"
							icon={{ light: LightGolang, dark: DarkGolang }}
							href="/docs/sdk/golang"
							active={collection === 'doc-sdk-golang'}
						/>
						<DropdownItem
							title="Python"
							icon={{ light: LightPython, dark: DarkPython }}
							href="/docs/sdk/python"
							active={collection === 'doc-sdk-python'}
						/>
						<DropdownItem
							title=".NET"
							icon={{ light: LightDotnet, dark: DarkDotnet }}
							href="/docs/sdk/dotnet"
							active={collection === 'doc-sdk-dotnet'}
						/>
						<DropdownItem
							title="PHP"
							icon={{ light: LightPhp, dark: DarkPhp }}
							href="/docs/sdk/php"
							active={collection === 'doc-sdk-php'}
						/>
					</div>
					<div>
						<div class="mb-1 font-medium">
							Education
						</div>
						<DropdownItem
							title="Tutorials"
							icon={{ light: LightTutorials, dark: DarkTutorials }}
							href="/docs/tutorials"
							active={collection === 'doc-tutorials'}
						/>
						<DropdownItem
							title="University"
							icon={{ light: LightUniversity, dark: DarkUniversity }}
							href="/learn"
							external
						/>
						<DropdownItem
							title="Book"
							icon={{ light: LightBook, dark: DarkBook }}
							href="/learn/book"
							external
						/>
						<DropdownItem
							title="Sidekick"
							icon={{ light: LightSidekick, dark: DarkSidekick }}
							href="https://surrealist.app/cloud/chat"
							external
						/>
					</div>
				</div>
            </Dropdown>
			<div class="md:hidden">
				<Search isMobile={true} />
			</div>
        </div>
    )}
    <div id="sidebar-container" class="overflow-y-auto flex-grow pb-8">
        <div class="px-4 lg:px-6 py-6">
            {items.map((item) => (
                <SidebarItem {...item} />
            ))}
        </div>
        {doc?.repo && (
            <div class="mx-6 lg:mx-8 px-2 py-3 border-t border-border">
                <a href={doc.repo.href} class="text-sm flex items-center gap-1.5 text-opacity-50">
                    {doc.repo.title}
                    <Icon name="fa6-solid:arrow-up-right-from-square" class="w-2.5" />
                </a>
            </div>
        )}
    </div>
</div>

<script>

	// Stores the scroll position in local storage when a sidebar link is clicked.
	// This is needed to restore the scroll position when the user navigates to a page.
	// We can't use hash-based scrolling because the sidebar is a separate component,
	// And if we do implement the content is scrolled down.

	const sidebar = document.getElementById('sidebar-container');

	if(!sidebar) {
		throw new Error('Sidebar container not found');
	}

	const active = sidebar.querySelector('.text-surreal-pink');

	if(!active) {
		throw new Error('Active sidebar item not found');
	}
	
	sidebar.scrollTo({ 
		top: active.getBoundingClientRect().top - sidebar.getBoundingClientRect().top + sidebar.scrollTop - 100,
		behavior: 'instant'
	})
</script>